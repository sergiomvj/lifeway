import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';

// Initialize clients with correct environment variables
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export async function POST(request: NextRequest) {
  try {
    const userData = await request.json();
    console.log('Dados recebidos para Get Opportunity:', userData);

    // Valida√ß√£o b√°sica
    if (!userData.email) {
      return NextResponse.json({ error: 'Email √© obrigat√≥rio' }, { status: 400 });
    }

    // Obter dados do formul√°rio para valida√ß√£o
    const { data: formData, error: formError } = await supabase
      .from('multistep_forms')
      .select('*')
      .eq('user_id', userData.email)
      .single();

    if (formError || !formData) {
      return NextResponse.json({
        success: false,
        error: 'Dados do formul√°rio ausentes. Por favor, preencha o formul√°rio antes de prosseguir.',
        redirectUrl: '/formulario' // URL do formul√°rio no frontend
      });
    }

    // Prompt personalizado para Get Opportunity
    const prompt = `
# Get Opportunity - An√°lise de Oportunidades Profissionais e Empreendedoras nos EUA

Baseado no perfil abaixo, crie uma an√°lise completa de oportunidades nos Estados Unidos:

## Dados do Usu√°rio:
- Nome: ${userData.fullName || 'N√£o informado'}
- Email: ${userData.email}
- Idade: ${userData.age || 'N√£o informado'}
- Profiss√£o: ${userData.profession || 'N√£o informado'}
- Estado Civil: ${userData.maritalStatus || 'N√£o informado'}
- Filhos: ${userData.children || 'N√£o informado'}
- Or√ßamento: ${userData.budget || 'N√£o informado'}
- Objetivos: ${userData.goals || userData.usaObjectives || 'N√£o informado'}
- Aspira√ß√µes: ${userData.aspiracoes || 'N√£o informado'}

## Estrutura do Relat√≥rio:

### 1. OPORTUNIDADES PROFISSIONAIS
- 3-5 carreiras espec√≠ficas compat√≠veis com o perfil
- Sal√°rios m√©dios por regi√£o
- Demanda de mercado
- Requisitos e certifica√ß√µes necess√°rias

### 2. OPORTUNIDADES EMPREENDEDORAS
- Tipos de neg√≥cio mais promissores
- Investimento inicial necess√°rio
- Potencial de retorno
- Setores em crescimento

### 3. REGI√ïES ESTRAT√âGICAS
- Estados/cidades recomendados
- Custo de vida vs oportunidades
- Comunidades brasileiras/internacionais
- Facilidades para imigrantes

### 4. PR√ìXIMOS PASSOS PR√ÅTICOS
- A√ß√µes imediatas
- Networking e contatos
- Prepara√ß√£o acad√™mica/profissional
- Timeline de implementa√ß√£o

Use dados atuais do mercado americano e seja espec√≠fico com valores, prazos e recomenda√ß√µes pr√°ticas.
`;

    console.log('Dados recebidos:', userData);
    console.log('Prompt gerado:', prompt);

    // Chamada para OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Voc√™ √© um especialista em mercado de trabalho americano e oportunidades de neg√≥cio nos EUA. Forne√ßa an√°lises detalhadas e pr√°ticas."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.7,
    });

    const aiResponse = completion.choices[0].message.content;

    console.log('üìù Tentando salvar na tabela user_reports...');

    // Salvar na tabela user_reports
    const { data: reportData, error: reportError } = await supabase
      .from('user_reports')
      .insert([
        {
          user_id: userData.email,
          tool_type: 'get_opportunity',
          input_data: userData,
          ai_response: aiResponse
        }
      ])
      .select()
      .single();

    if (reportError) {
      console.error('‚ùå Erro ao salvar get_opportunity:', reportError);
      return NextResponse.json({ 
        error: 'Erro ao salvar relat√≥rio',
        details: reportError.message
      }, { status: 500 });
    }

    console.log('‚úÖ Salvo com sucesso na user_reports');

    return NextResponse.json({
      success: true,
      report: aiResponse,
      reportId: reportData.id,
      tokensUsed: completion.usage?.total_tokens || 0
    });

  } catch (error) {
    console.error('Erro no Get Opportunity:', error);
    return NextResponse.json({ 
      error: 'Erro interno do servidor',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
}

// Endpoint para buscar relat√≥rios existentes
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const email = searchParams.get('email');
    const reportId = searchParams.get('id');

    if (reportId) {
      // Buscar relat√≥rio espec√≠fico
      const { data, error } = await supabase
        .from('user_reports')
        .select('*')
        .eq('id', reportId)
        .eq('tool_type', 'get_opportunity')
        .single();

      if (error) {
        return NextResponse.json({ error: 'Relat√≥rio n√£o encontrado' }, { status: 404 });
      }

      return NextResponse.json({ report: data });
    }

    if (email) {
      // Buscar relat√≥rios do usu√°rio
      const { data: reports, error } = await supabase
        .from('user_reports')
        .select('*')
        .eq('user_id', email)
        .eq('tool_type', 'get_opportunity')
        .order('created_at', { ascending: false });

      if (error) {
        return NextResponse.json({ error: 'Erro ao buscar relat√≥rios' }, { status: 500 });
      }

      return NextResponse.json({ reports: reports || [] });
    }

    return NextResponse.json({ error: 'Email ou ID do relat√≥rio √© obrigat√≥rio' }, { status: 400 });

  } catch (error) {
    console.error('Erro ao buscar relat√≥rios:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}
